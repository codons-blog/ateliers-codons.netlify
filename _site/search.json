[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/07-data.table/index.html#setup",
    "href": "posts/07-data.table/index.html#setup",
    "title": "{data.table}",
    "section": "Setup",
    "text": "Setup\n\n# Chargement des packages\nlibrary(readr)\nlibrary(dplyr)\nlibrary(stringr)\n\nlibrary(data.table)\n\nTélécharger les fichiers suivants (en cliquant sur l’icône Download) et sauvegardez-les dans votre répertoire de travail :\n\nFichier 1\nFichier 2"
  },
  {
    "objectID": "posts/07-data.table/index.html#table1",
    "href": "posts/07-data.table/index.html#table1",
    "title": "{data.table}",
    "section": "Import table 1",
    "text": "Import table 1\n\n# package readr de la suite tidyverse\nstart.time &lt;- Sys.time()\nd &lt;- read_tsv(\"ISBPS_REFSEQV2_vs_RENAN_PSEUDOV2_filtered.bam_summary.tsv\", col_names=T)\ntime.tidy &lt;- Sys.time() - start.time\n\n\n#package data.table\n##info systeme:\nnames(s &lt;- Sys.getenv())\nSys.getenv(\"NUMBER_OF_PROCESSORS\")\nSys.getenv(\"PROCESSOR_LEVEL\")\nSys.getenv(\"OMP_THREAD_LIMIT\")\nSys.setenv(\"OMP_THREAD_LIMIT\"=4)\nSys.getenv(\"OMP_THREAD_LIMIT\")\n\n\n##nThread=1\nsetDTthreads(threads=1, restore_after_fork=TRUE)\ngetDTthreads(verbose = getOption(\"datatable.verbose\"))\n\nstart.time &lt;- Sys.time()\ndt &lt;- fread(\"ISBPS_REFSEQV2_vs_RENAN_PSEUDOV2_filtered.bam_summary.tsv\",\n         nThread=1, sep=\"\\t\", header=TRUE, dec=\".\", encoding = \"UTF-8\", showProgress=TRUE)\ntime.dt1 &lt;- Sys.time() - start.time\ntime.dt1\ntime.tidy\n\n##nThread=4\nsetDTthreads(threads=6, restore_after_fork=TRUE)\ngetDTthreads(verbose = getOption(\"datatable.verbose\"))\n\nstart.time &lt;- Sys.time()\ndt &lt;- fread(\"ISBPS_REFSEQV2_vs_RENAN_PSEUDOV2_filtered.bam_summary.tsv\", \n         nThread=4, sep=\"\\t\", header=TRUE, dec=\".\", encoding = \"UTF-8\", showProgress=TRUE)\ntime.dt4 &lt;- Sys.time() - start.time\ntime.dt4\ntime.tidy\n\n#definition d'un deuxieme seprarteur (sep2) possible !!! :))\n#NB: option stringsAsFactors = TRUE peut ralentir sensiblement l’importation des donnees"
  },
  {
    "objectID": "posts/07-data.table/index.html#table2",
    "href": "posts/07-data.table/index.html#table2",
    "title": "{data.table}",
    "section": "Import table 2",
    "text": "Import table 2\n\n#package readr de la suite tidyverse\nstart.time &lt;- Sys.time()\nfa &lt;- read_tsv(\"Tae.Chinese_Spring.refSeqv2.1.ISBPs_fasta.txt\", col_names=F)\ntime.tidy &lt;- Sys.time() - start.time\n\ncolnames(fa) &lt;- c(\"read_id\",\"seq\")\n\n#package data.table  ---&gt; nThread \nstart.time &lt;- Sys.time()\nfadt &lt;- fread(\"Tae.Chinese_Spring.refSeqv2.1.ISBPs_fasta.txt\",\n           nThread=4, sep=\"\\t\", colClasses=c(\"character\", \"character\"), header=FALSE,\n           encoding = \"UTF-8\", showProgress=TRUE)\ntime.dt4 &lt;- Sys.time() - start.time\ntime.dt4\ntime.tidy"
  },
  {
    "objectID": "posts/07-data.table/index.html#col_select",
    "href": "posts/07-data.table/index.html#col_select",
    "title": "{data.table}",
    "section": "Sélection des données à importer",
    "text": "Sélection des données à importer\n\n# #package readr de la suite tidyverse\nstart.time &lt;- Sys.time()\nd &lt;- read_tsv(\"ISBPS_REFSEQV2_vs_RENAN_PSEUDOV2_filtered.bam_summary.tsv\", col_names=T,\n           col_select = -\"query_length\")\ntime.tidy &lt;- Sys.time() - start.time\n\n\n#pour selectionner des colonnes à importer: option \"col_select\" avec ou sans -\n#pour importer une portion de table: option \"skip\" et \"n_max\n\n\n#package data.table\nstart.time &lt;- Sys.time()\ndt &lt;- fread(\"ISBPS_REFSEQV2_vs_RENAN_PSEUDOV2_filtered.bam_summary.tsv\", \n         nThread=4, sep=\"\\t\", header=TRUE, dec=\".\", encoding = \"UTF-8\", showProgress=TRUE,\n         drop=\"query_length\")\ntime.dt4 &lt;- Sys.time() - start.time\ntime.dt4\ntime.tidy\n\n#pour selectionner des colonnes à importer: option \"clo_select\" avec ou sans -\n#pour importer une portion de table: option \"skip\" + \"nrows\"\n\n ## Presentation des données {#presentation}\n\n#suite tidyverse\nd\nfa\n\ndf &lt;- data.frame(d)\nfadf &lt;- data.frame(fa)\n\n#package data.table\ndt\nfadt\ncolnames(fadt) &lt;- c(\"read_id\",\"seq\")\n\noptions(\"datatable.print.keys\" = TRUE, \"datatable.print.class\" = TRUE)\ndt"
  },
  {
    "objectID": "posts/07-data.table/index.html#mean",
    "href": "posts/07-data.table/index.html#mean",
    "title": "{data.table}",
    "section": "Calculs par groupe selon critères",
    "text": "Calculs par groupe selon critères\n\n# R base\nstart.time &lt;- Sys.time()\nhead(df)\naggregate(df[df[[\"alignemnt_length\"]]==150, \"mapq\"],\n          by=list(df[df[[\"alignemnt_length\"]]==150, \"missmatches\"]),\n          FUN=mean)\nSys.time() - start.time\n\n#suite tidyverse\nstart.time &lt;- Sys.time()\nprint(d %&gt;%\n  dplyr::filter(alignemnt_length==150)%&gt;%\n  dplyr::group_by(missmatches)%&gt;%\n  dplyr::summarise(mean(mapq)),\n  n=100)\nSys.time() - start.time\n\n\n#package data.table\nstart.time &lt;- Sys.time()\ndt[alignemnt_length==150, mean(mapq), by = missmatches]\nSys.time() - start.time\n\n ## Enchainer les calculs {#arrange}\nDplyr utilise l’opérateur pipe %&gt;%.\nAvec data.table, il suffit d’accoler les opérateurs []: dt[opération 1][opération 2][opération 3][…]\n\n#suite tidyverse\nprint(d %&gt;%\n        dplyr::filter(alignemnt_length==150) %&gt;%\n        dplyr::group_by(missmatches) %&gt;%\n        dplyr::summarise(mean(mapq))%&gt;%\n        arrange(`mean(mapq)`),\n      n=100)\n\n#package data.table\ndt[alignemnt_length==150, mean(mapq), by = missmatches][order(missmatches)]"
  },
  {
    "objectID": "posts/07-data.table/index.html#tidyverse1",
    "href": "posts/07-data.table/index.html#tidyverse1",
    "title": "{data.table}",
    "section": "tidyverse",
    "text": "tidyverse\n\n#suite tidyverse\nd%&gt;%select(read_id, missmatches, mapq)\n\n#package data.table\ndt[, .(read_id, missmatches, mapq)]   #NB: .() est un alias pour \"list()\"\n\ndt[, .SD, .SDcols=c(\"read_id\", \"missmatches\", \"mapq\")] #ecriture a combiner avec lapply\n#SD pour Subset of Data: les colonnes listees seront aliasees par .SD avec la dimension .SDcols\n#et par defaut, toutes les colonnes sont traitees\n\n ## data.table {#data.table1}\n\n#"
  },
  {
    "objectID": "posts/07-data.table/index.html#Rbase2",
    "href": "posts/07-data.table/index.html#Rbase2",
    "title": "{data.table}",
    "section": "Rbase",
    "text": "Rbase\n\n # R base\nstart.time &lt;- Sys.time()\n#df_join=base::merge(df,fadf, by=\"read_id\", all.x=TRUE)\nSys.time() - start.time\n#####Time difference of 1.373174 mins\n\n ## tydiverse {#tidyverse2}\n\n#suite tidyverse\nstart.time &lt;- Sys.time()\nd_join=d%&gt;%left_join(fa)   #NB: une seule var key commune, nul besoin de preciser la var de jointure\n#sinon: d_join=d%&gt;%left_join(y=fa, by=\"read_id\")\nSys.time() - start.time\n\n ## data.table avec ou sans index {#data.table2}\n\n#package data.table\n##avec merge, meme ecriture qu'avec la fonction de R base\n\nstart.time = Sys.time()\ndt_join=merge(dt,fadt, by=\"read_id\", all.x=T)\ntime.dt_sansindex = Sys.time() - start.time\n\nstart.time = Sys.time()\ndt_join=dt[fadt, on=\"read_id\", nomatch=NULL]\nSys.time() - start.time\n\n##indexation de tables: accelere les combinaisons de donnees\nsetkey(dt, read_id)\nsetkey(fadt, read_id)\n\nstart.time = Sys.time()\ndt_join=merge(dt,fadt, by=\"read_id\", all.x=T)\ntime.dt_avecindex = Sys.time() - start.time\ntime.dt_sansindex\ntime.dt_avecindex\n\nkey(dt)\nsetkey(dt, NULL)\nkey(dt)"
  },
  {
    "objectID": "posts/07-data.table/index.html#Rbase3",
    "href": "posts/07-data.table/index.html#Rbase3",
    "title": "{data.table}",
    "section": "Rbase",
    "text": "Rbase\n\n#R base\nstart.time &lt;- Sys.time()\n#write.table(df_join, \"ISBP_REFSEQV2_vs_RENAN_with_FASTA.TAB\", col.names=T)\nSys.time() - start.time\n#Time difference of 1.977623 mins\n\n ## tydiverse {#tidyverse3}\n\n#suite tidyverse package readr\nstart.time &lt;- Sys.time()\nwrite_tsv(d_join, \"ISBP_REFSEQV2_vs_RENAN_with_FASTA.TAB\", col_names=T)\nSys.time() - start.time  # ~20 à 30sec\n\n ## data.table {#data.table3}\n\n#package data.table\nstart.time &lt;- Sys.time()\nfwrite(dt_join, \"ISBP_REFSEQV2_vs_RENAN_with_FASTA.TAB\", col.names=T)\nSys.time() - start.time  # moins de 2 secondes"
  },
  {
    "objectID": "posts/07-data.table/index.html#tidyverse4",
    "href": "posts/07-data.table/index.html#tidyverse4",
    "title": "{data.table}",
    "section": "tydiverse",
    "text": "tydiverse\n\n# TRANSPOSITION \nmat_join=as.matrix(dt_join)\ndim(mat_join)\nhead(mat_join, n=1)\ncolnames(mat_join)\n\ntmat_join=as.matrix(t(mat_join))\ndim(tmat_join)\nhead(tmat_join[,c(1,2,3,4,5)], n=9)\ntmat_join=data.table(tmat_join)\n\nfwrite(tmat_join, \"ISBP_REFSEQV2_vs_RENAN_with_FASTA_transposed_dt.TAB\", sep=\"\\t\", col.names=F)\n\n#package readr de la suite tidyverse\nstart.time &lt;- Sys.time()\n#d_trans=read_tsv(\"ISBP_REFSEQV2_vs_RENAN_with_FASTA_transposed_dt.TAB\", col_names=F)\ntime.tidy &lt;- Sys.time() - start.time ## tres tres long\n\n ## data.table {#data.table4}\n\n#package data.table\nstart.time &lt;- Sys.time()\ndt_trans=fread(\"ISBP_REFSEQV2_vs_RENAN_with_FASTA_transposed_dt.TAB\", \n         nThread=4, sep=\"\\t\", header=FALSE, dec=\".\", encoding = \"UTF-8\", showProgress=TRUE)\ntime.dt &lt;- Sys.time() - start.time\ntime.dt # ~16 secondes\ntime.tidy"
  },
  {
    "objectID": "posts/07-data.table/index.html#tidyverse5",
    "href": "posts/07-data.table/index.html#tidyverse5",
    "title": "{data.table}",
    "section": "tydiverse",
    "text": "tydiverse\n\n# mutate sur une colonne avec tidyverse\nstart.time &lt;- Sys.time()\nd_joinU=d_join %&gt;% head(5)%&gt;%mutate(seq=str_replace_all(seq,\"T\",\"U\"))\ntime.tidy &lt;- Sys.time() - start.time\n\n### mutate(across) sur toutes les colonnes \ntmat_d_join=tibble(tmat_join[,1:100000])\n\nstart.time &lt;- Sys.time()\ntmat_d_joinU=tmat_d_join %&gt;% mutate(across(everything(), ~gsub(\"T\",\"U\",.)))\ntime.tidy &lt;- Sys.time() - start.time\ntime.tidy\n\nhead(tmat_d_joinU[,c(1,2,3,4,5)], n=9)"
  },
  {
    "objectID": "posts/07-data.table/index.html#data.table5",
    "href": "posts/07-data.table/index.html#data.table5",
    "title": "{data.table}",
    "section": "data.table",
    "text": "data.table\n\n# str_replace sur une colonne\nstart.time &lt;- Sys.time()\ndt_joinU=dt_join[1:5,][,seq:=str_replace_all(seq,\"T\",\"U\")]\ntime.dt &lt;- Sys.time() - start.time\ntime.dt\ntime.tidy\n\n### lapply .SD .SDcols sur 5 colonnes\ncols=c(\"V1\",\"V2\",\"V3\",\"V4\",\"V5\")\ntmat_dt_joinU=tmat_dt_join[,(cols):=lapply(.SD, function(x) gsub(\"T\",\"U\",as.character(x))), .SDcols=cols]\nhead(tmat_dt_joinU[,c(1,2,3,4,5)], n=9)\n\n### lapply .SD .SDcols sur toutes les colonnes \ncols=c(\"V1\",\"V2\",\"V3\",\"V4\",\"V5\")\nstart.time &lt;- Sys.time()\ntmat_dt_joinU=lapply(tmat_dt_join, function(x) gsub(\"T\",\"U\",as.character(x)) )\ntime.dt &lt;- Sys.time() - start.time\ntime.dt\n\nhead(tmat_dt_joinU[,c(1,2,3,4,5)], n=9)\n\n\nRéférences UtilitR"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html",
    "href": "posts/03-introduction-tidyverse/index.html",
    "title": "Introduction au Tidyverse",
    "section": "",
    "text": "Ce tutoriel est adapté de Basic data manipulation et Efficient data manipulation du site Our Coding Club."
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#quest-ce-que-le-tidyverse",
    "href": "posts/03-introduction-tidyverse/index.html#quest-ce-que-le-tidyverse",
    "title": "Introduction au Tidyverse",
    "section": "Qu’est-ce que le Tidyverse ?",
    "text": "Qu’est-ce que le Tidyverse ?\nLe Tidyverse est un ensemble de packages proposant de multiples fonctions utiles à l’ensemble des étapes d’une analyse :\n\n\n\nreadr\nimporter et exporter les données\n\n\ntibble\nformat de tableau propre au tidyverse\n\n\ndplyr\nmanipuler les données\n\n\ntidyr\ntransformer des tableaux\n\n\nstringr\nmanipuler des chaînes de caractères\n\n\nforcats\nmanipuler des variables catégorielles\n\n\nggplot2\nreprésenter les données\n\n\npurrr\nprogrammation fonctionnelle\n\n\nlubridate\nmanipuler des dates"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#pré-requis",
    "href": "posts/03-introduction-tidyverse/index.html#pré-requis",
    "title": "Introduction au Tidyverse",
    "section": "Pré-requis",
    "text": "Pré-requis\nSi vous n’avez pas suivi les autres tutoriels, vous pouvez créer un projet RStudio et une arborescence.\nPour utiliser le Tidyverse, vous pouvez soit installer et charger séparément les packages dont vous aurez besoin, soit installer et charger directement la suite complète :\n\n# Installer et charger les packages readr et dplyr\ninstall.packages(c(\"readr\", \"dplyr\"))\nlibrary(readr)\nlibrary(dplyr)\n\n# Installer et charger la suite Tidyverse\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)\n\n\n\n\n\n\n\nLes conflits\n\n\n\nLorsque vous exécutez la fonction library(tidyverse), le message suivant s’affiche dans la console :\n\nR vous indique :\n\nle nom et la version des packages individuels (Attaching packages)\n\nles fonctions portant des noms identiques existant dans d’autres packages (Conflicts)\n\nIl existe par exemple une fonction filter() dans le package stats. Si vous souhaitez utiliser cette dernière fonction plutôt que celle proposée dans le package dplyr, il vous foudra préciser le package en question : stats::filter()."
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#importer-les-données",
    "href": "posts/03-introduction-tidyverse/index.html#importer-les-données",
    "title": "Introduction au Tidyverse",
    "section": "Importer les données",
    "text": "Importer les données\nNous allons utiliser le même jeu de données que dans les tutoriels précédents (vous pouvez le télécharger ici et le sauvegarder dans votre dossier raw/).\nPour importer les données, nous utilisons la fonction read_csv(), à ne pas comprendre avec la fonction read.csv() utilisée précédemment.\n\npingouins &lt;- readr::read_csv(file = \"raw/pingouins.csv\")\n\nVous pouvez voir dans la console des informations concernant vos données :\n- les dimensions du tableau\n- le séparateur de colonnes\n- les types et les noms des variables\n\nTapez pingouins dans la console et appuyez sur Entrée : vos données s’affichent et vous pouvez voir qu’il s’agit d’un tibble, qui présente quelques particularités par rapport à un tableau “classique” :\n\nles dimensions du tibble sont précisées\n\nles types des variables sont indiquées sous les noms des colonnes\n\nseules les dix premières lignes sont affichées\n\nle nombre de colonnes affichées dépend de la largeur de l’écran\n\nles noms de colonnes sont raccourcis si nécessaire\n\nles données manquantes NA sont mises en évidence\n\nPour bien voir la différence entre un tibble et un data.frame, comparez les deux commandes suivantes :\n\npingouins\nas.data.frame(pingouins)\n\n\n\n\n\n\n\n\nExporter des données\n\n\n\nPour exporter des données au format csv, utiliser la fonction write_csv()"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#explorer-les-données",
    "href": "posts/03-introduction-tidyverse/index.html#explorer-les-données",
    "title": "Introduction au Tidyverse",
    "section": "Explorer les données",
    "text": "Explorer les données\nPlusieurs fonctions incluses dans R permettent d’explorer rapidement des données pour s’assurer qu’elles ont été correctement importées :\n\n# Afficher les premieres lignes\nhead(pingouins)\n\n# Afficher les dernieres lignes\ntail(pingouins)\n\n# Afficher la structure des donnees\nstr(pingouins)\n\nLa fonction glimpse() (du package readr) retourne sensiblement les mêmes informations que la fonction str() :\n\ndplyr::glimpse(pingouins)"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#créer-une-copie-de-travail",
    "href": "posts/03-introduction-tidyverse/index.html#créer-une-copie-de-travail",
    "title": "Introduction au Tidyverse",
    "section": "Créer une copie de travail",
    "text": "Créer une copie de travail\nLa première chose à faire avant de manipuler, modifier et transformer nos données est de créer une copie de travail : cela nous permettra, en cas d’erreur, de repartir des données d’origines.\n\npingouins_tmp &lt;- pingouins"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#renommer-des-colonnes",
    "href": "posts/03-introduction-tidyverse/index.html#renommer-des-colonnes",
    "title": "Introduction au Tidyverse",
    "section": "Renommer des colonnes",
    "text": "Renommer des colonnes\nCommençons par renommer des colonnes afin de respecter les conventions d’écriture :\n\nsnake_case : caractères minuscules, mots séparés par des _\n\ncamelCase : aucune séparation entre les mots, majuscule pour débuter un mot\n\nLa fonction rename s’utilise de la façon suivante : rename(data, nouveau nom = ancien nom)\n\ndplyr::rename(pingouins_tmp, ile = Ile)\n\nNous pourrions procéder de la même façon pour plusieurs colonnes à la fois :\n\ndplyr::rename(pingouins_tmp, espece = Espece, ile = Ile)\n\n\nLe package janitor est dédié au nettoyage d’un tableau (noms de colonnes, suppression des doublons, …). Utilisons la fonction clean_names() de ce package :\n\njanitor::clean_names(pingouins_tmp)\n\nAssignons ces noms de colonnes nettoyés à notre copie de travail :\n\npingouins_tmp &lt;- janitor::clean_names(pingouins_tmp)\n\nAssurons-nous que les noms de colonnes ont bien été modifiés :\n\nnames(pingouins_tmp)\n\n\n\n\n\n\n\n\nExplorer les arguments d’une fonction\n\n\n\nPour afficher l’aide de la fonction clean_names, tapez ?clean_names (ou ?janitor::clean_names) dans la console. Vous trouverez dans l’aide toutes les informations concernant une fonction. Dans notre cas, nous pourrions utiliser différentes conventions d’écriture pour nos noms de colonnes : clean_names(pingouins_tmp, case = \"lower_camel\") par exemple."
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#sélectionner-des-colonnes",
    "href": "posts/03-introduction-tidyverse/index.html#sélectionner-des-colonnes",
    "title": "Introduction au Tidyverse",
    "section": "Sélectionner des colonnes",
    "text": "Sélectionner des colonnes\nLa fonction select() permet de sélectionner les colonnes d’un tableau. Nous allons sélectionner les colonnes espece, ile, longueur_bec_mm, hauteur_bec_mm, longueur_aile_mm et masse_corporelle_g. Nous pouvons procéder de plusieurs façons :\n\n# Indiquer toutes les colonnes\ndplyr::select(pingouins_tmp, espece, ile, longueur_bec_mm, hauteur_bec_mm,\n              longueur_aile_mm, masse_corporelle_g)\n\n# Indiquer les suites de colonnes\ndplyr::select(pingouins_tmp, espece:ile, longueur_bec_mm:masse_corporelle_g)\n\n# Supprimer des colonnes\ndplyr::select(pingouins_tmp, -c(etude_numero, echantillon_numero, id_individu))\n\n\nD’autres fonctions du package dplyr permettent de sélectionner des colonnes :\n\ncontains() : sélectionner les noms de colonnes qui contiennent un motif\n\nstarts_width() : sélectionner les noms de colonnes qui commencent par un motif\n\nends_width() : sélectionner les noms de colonnes qui se terminent par un motif\n\nDans notre cas, nous pouvons sélectionner les colonnes espece et ile, puis les colonnes dont le nom se termine par mm ou par g :\n\n# Utiliser la fonction ends_with()\ndplyr::select(pingouins_tmp, espece, ile, dplyr::ends_with(c(\"mm\", \"g\")))\n\nAssignons cette sélection de colonnes à notre objet :\n\npingouins_tmp &lt;- dplyr::select(pingouins_tmp, espece, ile, dplyr::ends_with(c(\"mm\", \"g\")))\n\n\n\n\n\n\n\n\nRenommer et ré-ordonner des colonnes avec select()\n\n\n\nNous pouvons utiliser la fonction select() pour renommer des colonnes :\n\ndplyr::select(pingouins_tmp, espece:longueur_aile_mm, masse = masse_corporelle_g)\n\nMais aussi pour modifier l’ordre des colonnes :\n\ndplyr::select(pingouins_tmp, espece:ile, masse_corporelle_g, longueur_bec_mm:longueur_aile_mm)\n\nEnfin, si nous n’avons que quelques colonnes à déplacer, la fonction everything() permet de sélectionner le reste du tableau !\n\ndplyr::select(pingouins_tmp, ile, dplyr::everything())"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#filtrer-des-données",
    "href": "posts/03-introduction-tidyverse/index.html#filtrer-des-données",
    "title": "Introduction au Tidyverse",
    "section": "Filtrer des données",
    "text": "Filtrer des données\nLa fonction filter() permet de filtrer les données à l’aide d’opérateurs logiques :\n\n\n\n==\nstrictement égal à\n\n\n&lt;=\ninférieur ou égal à\n\n\n&lt;\ninférieur à\n\n\n&gt;=\nsupérieur ou égal à\n\n\n&gt;\nsupérieur à\n\n\n!=\ndifférent de\n\n\n%in%\nappartient à\n\n\n&\net\n\n\n|\nou\n\n\n!\nnégation\n\n\n\nVoici deux exemples :\n\n# Individus vivant sur l'ile Biscoe pesant au moins 5 kgs\ndplyr::filter(pingouins_tmp, ile == \"Biscoe\", masse_corporelle_g &gt;= 5000)\n\n# Individus vivant sur les iles Biscoe ou Torgersen\ndplyr::filter(pingouins_tmp, ile %in% c(\"Biscoe\", \"Torgersen\"))\n\n\nLa fonction between() permet de garder les valeurs numériques entre deux bornes :\n\n# Individus pesant entre 3 kgs et 3,5 kgs\ndplyr::filter(pingouins_tmp, dplyr::between(masse_corporelle_g, 3000, 3250))\n\n\nNotre jeu de données contient des données manquantes NA. Il existe plusieurs manières de supprimer ces données manquantes :\n\n# Garder les lignes pour lesquelles la variable longueur_bec_mm ne contient pas de NA\ndplyr::filter(pingouins_tmp, !is.na(longueur_bec_mm))\n\n# Supprimer les lignes pour lesquelles la variable longueur_bec_mm contient au moins un NA\ntidyr::drop_na(pingouins_tmp, longueur_bec_mm)\n\n# Supprimer les lignes contenant des NAs, quelque soit la variable\ntidyr::drop_na(pingouins_tmp)\n\n\n\n\n\n\n\n\nExtraire les lignes uniques\n\n\n\nLa fonction distinct() permet d’extraire les observations uniques présentes dans une colonne ou une combinaison de colonnes :\n\ndplyr::distinct(pingouins_tmp, ile, espece)"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#trier-des-données",
    "href": "posts/03-introduction-tidyverse/index.html#trier-des-données",
    "title": "Introduction au Tidyverse",
    "section": "Trier des données",
    "text": "Trier des données\nLa fonction arrange() permet de trier des données. Par défaut, le tri s’effectue par ordre croissant. Pour trier des données par ordre décroissant, il faut ajouter la fonction desc() ou utiliser un moins - devant le nom de la colonne :\n\n# Trier les données par ordre croisant de longueur de bec\ndplyr::arrange(pingouins_tmp, longueur_bec_mm)\n\n# Trier les données par ordre décroissant de masse corporelle\ndplyr::arrange(pingouins_tmp, dplyr::desc(masse_corporelle_g))\ndplyr::arrange(pingouins_tmp, -masse_corporelle_g)\n\n\nIl est possible de trier sur plusieurs colonnes : nous pouvons trier les individus par ordre décroissant de hauteur de bec puis par ordre décroissant de longueur de bec. Cela peut être utile pour départager des individus “ex-aequo” pour une variable :\n\ndplyr::arrange(pingouins_tmp, dplyr::desc(hauteur_bec_mm), dplyr::desc(longueur_bec_mm))"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#créer-ou-modifier-des-colonnes",
    "href": "posts/03-introduction-tidyverse/index.html#créer-ou-modifier-des-colonnes",
    "title": "Introduction au Tidyverse",
    "section": "Créer ou modifier des colonnes",
    "text": "Créer ou modifier des colonnes\nLa fonction mutate() permet de créer une nouvelle colonne. Nous pouvons par exemple ajouter une colonne ratio_bec dans laquelle nous allons calculer le rapport entre la longueur du bec et sa hauteur :\n\ndplyr::mutate(pingouins_tmp, ratio_bec = longueur_bec_mm / hauteur_bec_mm)\n\nNous pouvons également modifier le contenu d’une colonne, par exemple en ajoutant le suffixe island au contenu de la colonne ile :\n\ndplyr::mutate(pingouins_tmp, ile = paste0(ile, \" island\"))\n\nLa fonction transmute() permet quant à elle de créer une nouvelle colonne tout en supprimant les colonnes pré-existantes :\n\ndplyr::transmute(pingouins_tmp, masse_kgs = masse_corporelle_g / 1000)"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#effectuer-des-comptages",
    "href": "posts/03-introduction-tidyverse/index.html#effectuer-des-comptages",
    "title": "Introduction au Tidyverse",
    "section": "Effectuer des comptages",
    "text": "Effectuer des comptages\nLa fonction count() permet d’effectuer des comptages sur les variables.\nComptons le nombre d’individus par espèce :\n\ndplyr::count(pingouins_tmp, espece)\n\nL’argument sort = TRUE permet d’afficher le résultat par ordre décroissant :\n\ndplyr::count(pingouins_tmp, espece, sort = TRUE)\n\n\nNous pouvons également compter les individus par île et par espèce :\n\ndplyr::count(pingouins_tmp, ile, espece, sort = TRUE)\n\n\nDans le dernier cas, seuls les combinaisons de variables pour lesquelles il existe des combinaisons sont affichées. Il peut être intéressant d’afficher tous les cas de figure, à l’aide de la fonction complete(). Il faut préciser les variables à utiliser pour compléter les combinaisons :\n\nnb_ind_ile_espece &lt;- dplyr::count(pingouins_tmp, ile, espece, sort = TRUE)\ntidyr::complete(nb_ind_ile_espece, ile, espece)\n\nLa variable n prend comme valeur NA lorsque la combinaison n’est pas présente dans le tableau. Nous pouvons remplacer ces NA par des zéros :\n\ntidyr::complete(nb_ind_ile_espece, ile, espece, fill = list(n = 0))"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#agréger-des-lignes",
    "href": "posts/03-introduction-tidyverse/index.html#agréger-des-lignes",
    "title": "Introduction au Tidyverse",
    "section": "Agréger des lignes",
    "text": "Agréger des lignes\nLa fonction summarise() permet d’agréger des lignes en effectuant une opération.\nCalculons la longueur moyenne du bec pour l’ensemble des individus, sans oublier l’argument na.rm = TRUE pour supprimer les données manquantes lors du calcul. Si nous avions assigné à l’objet pingouins_tmp les données après avoir retiré les lignes contenant des données manquantes, nous pourrions nous passer de cet argument. Dans le doute, mieux vaut ajouter cet argument :\n\ndplyr::summarise(pingouins_tmp,\n                 longueur_bec_mm_moy = mean(longueur_bec_mm, na.rm = TRUE))\n\nCette fonction peut également s’utiliser sur plusieurs variables :\n\ndplyr::summarise(pingouins_tmp,\n                 longueur_bec_mm_moy = mean(longueur_bec_mm, na.rm = TRUE),\n                 hauteur_bec_mm_moy = mean(hauteur_bec_mm, na.rm = TRUE))"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#regrouper-les-données",
    "href": "posts/03-introduction-tidyverse/index.html#regrouper-les-données",
    "title": "Introduction au Tidyverse",
    "section": "Regrouper les données",
    "text": "Regrouper les données\nLa fonction group_by(), utilisée en combinaison avec la fonction summarise(), permet de regrouper les données pour effectuer des calculs par groupe.\nCalculons la longueur moyenne du bec par espece :\n\ndplyr::summarise(dplyr::group_by(pingouins_tmp, espece),\n                 longueur_bec_mm_moy = mean(longueur_bec_mm, na.rm = TRUE))\n\nCette fonction permet de définir des sous-groupes. Calculons la longueur moyenne du bec par île et par espèce :\n\ndplyr::summarise(dplyr::group_by(pingouins_tmp, ile, espece),\n                 longueur_bec_mm_moy = mean(longueur_bec_mm, na.rm = TRUE))\n\n\n\n\n\n\n\nDégrouper les données\n\n\n\nLa fonction ungroup() permet de dégrouper les données\n\n\n\n\n\n\n\n\n\nExercice 1 - énoncé\n\n\n\n\n\n\n# Importer le fichier gapminder.csv\n\n# Explorer les donnees \n\n# Creer une copie de travail\n\n# Nettoyer les noms de colonnes\n\n# Deplacer la colonne \"continent\" en premiere position\n\n# Ajouter une colonne contenant le PIB global\n\n# Filtrer les donnees pour 2007 et trier par ordre decroissant de PIB global\n\n# Calculer la mediane du PIB par habitant en 2007 par continent\n\n\n\n\n\n\n\n\n\n\nExercice 1 - solution\n\n\n\n\n\n\n# Importer le fichier gapminder.csv\ngapminder &lt;- readr::read_csv(\"raw/gapminder.csv\")\n\n# Explorer les donnees \ndplyr::glimpse(gapminder)\n\n# Creer une copie de travail\ngapminder_tmp &lt;- gapminder\n\n# Nettoyer les noms de colonnes\ngapminder_tmp &lt;- janitor::clean_names(gapminder_tmp)\n\n# Deplacer la colonne \"continent\" en premiere position\ngapminder_tmp &lt;- dplyr::select(gapminder_tmp, continent, dplyr::everything())\n\n# Ajouter une colonne contenant le PIB global\ngapminder_tmp &lt;- dplyr::mutate(gapminder_tmp, \n                               gdp_global = pop * gdp_percap)\n\n# Filtrer les donnees pour 2007 et trier par ordre decroissant de PIB global\ngapminder_2007 &lt;- dplyr::filter(gapminder_tmp, year == 2007)\ngapminder_2007_tri &lt;- dplyr::arrange(gapminder_2007, -gdp_global)\n\n# Calculer la mediane du PIB par habitant en 2007 par continent\nsummarise(dplyr::group_by(gapminder_2007, continent),\n          median_gdp_global = median(gdp_percap, na.rm = TRUE))"
  },
  {
    "objectID": "posts/01-installer-r-et-rstudio/index.html",
    "href": "posts/01-installer-r-et-rstudio/index.html",
    "title": "Installer R et RStudio",
    "section": "",
    "text": "Ce tutoriel est adapté de Getting started with R and RStudio du site Our Coding Club."
  },
  {
    "objectID": "posts/01-installer-r-et-rstudio/index.html#télécharger-r",
    "href": "posts/01-installer-r-et-rstudio/index.html#télécharger-r",
    "title": "Installer R et RStudio",
    "section": "Télécharger R",
    "text": "Télécharger R\nNaviguez jusqu’au site internet du CRAN (The Comprehensive R Archive Network) et choisissez Download R for Windows.\n\n\n\n\n\n\nCliquez sur base puis sur Download R-… for Windows.\n \n\nChoisissez l’emplacement de sauvegarde puis téléchargez le fichier."
  },
  {
    "objectID": "posts/01-installer-r-et-rstudio/index.html#installer-r",
    "href": "posts/01-installer-r-et-rstudio/index.html#installer-r",
    "title": "Installer R et RStudio",
    "section": "Installer R",
    "text": "Installer R\nNaviguez jusqu’à l’emplacement de sauvegarde (Téléchargements par exemple) et double-cliquez sur le fichier R-…-win.exe\n\n\n\n\n\n\nChoisissez la langue pour l’installation puis cliquez sur OK\n\n\n\n\n\n\nParcourez les Informations puis cliquez sur Suivant.\n\n\n\n\n\n\nChoisissez le dossier dans lequel sera installé R (Program Files par exemple).\n\n\n\n\n\n\nDans les Composants à installer, laissez les valeurs par défaut puis cliquez sur Suivant.\n\n\n\n\n\n\nDans les Options de démarrage, laissez les valeurs par défauts puis cliquez sur Suivant.\n\n\n\n\n\n\nDans les Tâches supplémentaires, vous pouvez choisir de créer une icône sur le Bureau et/ou dans la barre de lancement rapide.\n\n\n\n\n\n\nNote\n\n\n\nNous utilisons rarement R de manière isolée, vous pouvez donc laisser les valeurs par défaut.\n\n\n\n\n\n\n\n\nUne fois R installé, cliquez sur Terminer.\n\n\n\n\n\n\nNote\n\n\n\nLa plupart des utilisateurs interagissent avec R à l’aide d’une interface graphique, dont la plus connue est RStudio."
  },
  {
    "objectID": "posts/01-installer-r-et-rstudio/index.html#télécharger-rstudio",
    "href": "posts/01-installer-r-et-rstudio/index.html#télécharger-rstudio",
    "title": "Installer R et RStudio",
    "section": "Télécharger RStudio",
    "text": "Télécharger RStudio\nNaviguez jusqu’au site internet de RStudio et cliquez sur Products puis sur RStudio.\n\n\n\n\n\n\nChoisissez RStudio Desktop\n\n\n\n\n\n\nCliquez sur Download RStudio Desktop\n\n\n\n\n\n\nChoisissez RStudio Desktop FREE puis cliquez sur Download.\n\n\n\n\n\n\nCliquez sur Download RStudio for Windows et choisissez l’emplacement de sauvegarde."
  },
  {
    "objectID": "posts/01-installer-r-et-rstudio/index.html#installer-rstudio",
    "href": "posts/01-installer-r-et-rstudio/index.html#installer-rstudio",
    "title": "Installer R et RStudio",
    "section": "Installer RStudio",
    "text": "Installer RStudio\nNaviguez jusqu’à l’emplacement de sauvegarde (Téléchargements par exemple) et double-cliquez sur le fichier RStudio-…exe\n\n\n\n\n\n\nDans la fenêtre Installation de RStudio qui s’ouvre, cliquez sur Suivant.\n\n\n\n\n\n\nChoisissez le dossier dans lequel sera installé RStudio (Program Files par exemple) et cliquez sur Suivant.\n\n\n\n\n\n\nDans le menu Choisissez un dossier dans le menu Démarrer, laissez la valeur par défaut (RStudio) et cliquez sur Installer.\n\n\n\n\n\n\nUne fois RStudio installé, cliquez sur Fermer."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ateliers codons",
    "section": "",
    "text": "R - initiation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR - perfectionnement"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html",
    "href": "posts/02-premiers-pas-avec-r/index.html",
    "title": "Premiers pas avec R",
    "section": "",
    "text": "Ce tutoriel est adapté de Getting started with R and RStudio du site Our Coding Club."
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#r_def",
    "href": "posts/02-premiers-pas-avec-r/index.html#r_def",
    "title": "Premiers pas avec R",
    "section": "Qu’est-ce que R ?",
    "text": "Qu’est-ce que R ?\n\nR est un langage de programmation statistique qui a rapidement gagné en popularité dans de nombreux domaines scientifiques.\nIl a été développé par Ross Ihaka et Robert Gentleman, du Département de Statistiques de l’Université d’Auckland, comme implémentation libre du langage de programmation S.\n\n\n\n\n\n\n\nQuelques dates\n\n\n\n\n\n\n1991\nCréation du langage R\n\n\n1993\nR est dévoilé au public\n\n\n1996\nArticle dans le Journal of Computational and Graphical Statistics\n\n\n\n\n\n\nR désigne également le logiciel qui utilise ce langage pour des calculs statistiques (et tout un tas d’autres applications (manipulation de données, graphiques, …).\nIl dispose d’une communauté en ligne très active ainsi que d’extensions appelées packages pour presque tous les domaines et applications possibles et imaginables (cartographie, fouille de texte, modélisation, …).\nContrairement à d’autres logiciels de statistiques comme Minitab ou SPSS, R peut être exécuté entièrement en ligne de commande et ne nécessite pas d’interface graphique, ce qui lui confère une grande flexibilité.\n\n\n\n\n\n\n\nQuelques avantages de R\n\n\n\n\nC’est un outil libre et open source (tout le monde peut utiliser le code et voir comment il fonctionne)\nC’est un langage de programmation plutôt qu’une interface graphique, ce qui permet à l’utilisateur de sauvegarder facilement des scripts pour les ré-utiliser ou les partager\nBeaucoup de personnes l’utilisent dans beaucoup de domaines différents - il est rare d’être confronté à un problème qui n’a jamais été résolu !"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#naviguer_rstudio",
    "href": "posts/02-premiers-pas-avec-r/index.html#naviguer_rstudio",
    "title": "Premiers pas avec R",
    "section": "Naviguer dans RStudio",
    "text": "Naviguer dans RStudio\n\nLa plupart des utilisateurs interagissent avec R à l’aide d’une interface graphique, dont la plus connue et répandue est RStudio.\nEn ouvrant RStudio, vous verrez une fenêtre comme celle ci-dessous, divisée en trois panneaux :\n\n\n\nLa console\n\nVous pouvez y taper du code et l’exécuter en appuyant sur Entrée.\nQuand vous démarrez une nouvelle session dans RStudio, la console affiche également des informations comme la version de R présente sur votre ordinateur ainsi que des indications sur la manière d’obtenir de l’aide.\n\n\n\n\n\n\n\nL’invite de commande\n\n\n\nDans la console, une ligne commence par &gt; : c’est ce qu’on appelle l’invite de commande. Cela indique que R est prêt à recevoir vos instructions.\nTapez 2+2 puis appuyez sur Entrée : la console affiche le résultat.\n\n2 + 2\n\n[1] 4\n\n\n\n\nDans la console, vous pouvez parcourir les dernières commandes exécutées à l’aide des flèches haut et bas.\n\n\n\n\n\n\nRaccourcis clavier : vider la console\n\n\n\nPour vider la console, utilisez la combinaison Ctrl + L\n\n\n\n\n\nL’espace de travail\n\nVous y trouverez votre environnement (données importées, objets, fonctions, …), ainsi que d’autres onglets comme l’historique des commandes exécutées ou l’accès à des tutoriels (pour les versions récentes de RStudio).\n\n\n\n\n\n\nUn langage orienté objet\n\n\n\nR est un langage orienté objet, ce qui veut dire que tout ce que vous manipulez dans R (données, fonctions, …) est stocké dans un objet.\n\n\n\nLorsque vous quittez votre session RStudio, vous aurez la possibilité de sauvegarder votre espace de travail. Il est préférable de ne pas le faire afin de démarrer chaque session avec un espace de travail vide.\n\n\n\nLe navigateur\n\nCe navigateur vous permet de naviguer dans vos dossiers, de copier, renommer ou supprimer des fichiers, à la manière d’un explorateur classique.\nLes autres onglets permettent de visualiser les graphiques, de voir quels packages (extensions) sont installés, ou encore d’afficher l’aide.\n\n\n\nLe script\n\n\n\n\n\n\n\nImportant\n\n\n\nLe code tapé et exécuté dans la console ne sera plus disponible quand vous quitterez votre session RStudio. A la manière d’un document Word, un script vous permet de sauvegarder votre code afin d’y accéder ultérieurement ou de le partager.\n\n\n\nPour ouvrir un nouveau script, cliquez sur le “plus” dans le coin supérieur gauche de la fenêtre RStudio puis sur R Script.\n\n\n\n\n\n\n\n\nRaccourcis clavier : ouvrir un nouveau script\n\n\n\nPour ouvrir un nouveau script, utilisez la combinaison Ctrl + Shift + N\n\n\n\nUn nouveau panneau s’affiche :"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#créer-un-projet",
    "href": "posts/02-premiers-pas-avec-r/index.html#créer-un-projet",
    "title": "Premiers pas avec R",
    "section": "Créer un projet",
    "text": "Créer un projet\n\nLorsque vous partagez votre code avec d’autres personnes, celles-ci doivent pouvoir reproduire votre analyse sans erreur et obtenir des résultats identiques (on parle de reproductibilité).\nLes projets RStudio aident à construire une analyse reproductible en regroupant tous les éléments nécessaires dans un seul dossier (code, données, figures et paramètres). Cela vous évitera de perdre du temps à chercher des fichiers dans votre ordinateur : la racine du projet est votre répertoire de travail.\nNous verrons dans un autre tutoriel comment connecter un projet RStudio à un gestionnaire de version comme GitLab : vous pourrez travailler à plusieurs sur un même code en gardant une trace de toutes les modifications apportées par l’une ou l’autre personne.\nPour créer un projet, cliquez sur File puis New project… :\n\n\nChoisissez New Directory puis New Project\n\n\n\n\n\n\n\n\n\n\n\nDans la fenêtre Create New Project, attribuez un nom et un emplacement au projet, puis cliquez sur Create project.\n\n\nQuand vous voudrez travailler à nouveau sur ces données, il vous suffira d’ouvrir le projet en double-cliquant sur le fichier .Rproj.\n\n\n\n\n\n\n\n\nBonnes pratiques : nommer ses fichiers et dossiers\n\n\n\n\nprivilégiez les noms courts et explicites (à éviter : fichier_2e_version_a_verifier.txt)\nne mettez ni espace ni caractères spéciaux (accents, symboles, …)\n\npour les dates, privilégiez le format AAAAMMJJ (année, mois, jour)\nmettez l’élément le plus important en premier (par exemple : projet_date_contenu)\n\noptez pour l’une de ces deux conventions d’écriture : camel case (MonProjet) ou snake case (mon_projet)"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#créer-une-arborescence",
    "href": "posts/02-premiers-pas-avec-r/index.html#créer-une-arborescence",
    "title": "Premiers pas avec R",
    "section": "Créer une arborescence",
    "text": "Créer une arborescence\nIl est toujours préférable de passer un peu de temps à bien organiser un projet lors de sa création, plutôt que de passer beaucoup de temps par la suite à déplacer des fichiers, les renommer, les rechercher, …\nPour créer un nouveau dossier dans votre projet, cliquez sur New Folder dans l’onglet Files du navigateur :\n\nL’organisation proposée ci-dessous est utilisable dans une très grande majorité de cas :\n\nraw : données brutes\ndata : données issues de la manipulation/modification des données brutes\nscripts : code utilisé pour analyser les données, créer les graphiques, …\nresults : fichiers de résultats obtenus durant l’analyse\nfigs : graphiques générés au cours de l’analyse\ndocs : rapports, présentations, articles en lien avec l’analyse, documents concernant les outils utilisés, … |"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#renommer-des-colonnes",
    "href": "posts/02-premiers-pas-avec-r/index.html#renommer-des-colonnes",
    "title": "Premiers pas avec R",
    "section": "Renommer des colonnes",
    "text": "Renommer des colonnes\nLes noms des colonnes ne sont pas dans un format idéal (présence d’espaces, de parenthèses).\nLa fonction names() permet d’accéder aux noms des colonnes d’un tableau :\n\nnames(pingouins_propre)\n\n[1] \"etudeNumero\"          \"Echantillon Numero\"   \"Espece\"              \n[4] \"Ile\"                  \"ID Individu\"          \"Longueur Bec (mm)\"   \n[7] \"Hauteur Bec (mm)\"     \"Longueur Aile (mm)\"   \"Masse corporelle (g)\"\n\n\n\nNous allons modifier les noms de colonnes en :\n\nsupprimant les parenthèses\nremplaçant les espaces par des _\nremplaçant les majuscules par des minuscules\n\n\nLa fonction gsub() qui permet de remplacer un motif par un autre dans une chaîne, s’utilise de la manière suivante : gsub(motif, remplacement, objet)\nCommençons par supprimer les parenthèses. Nous allons pour cela utiliser une expression régulière : le motif recherché est soit une parenthèse ouverte soit une parenthèse fermée.\n\nnouveaux_noms &lt;- gsub(\"[()]\", \"\", names(pingouins_propre))\n\nRemplaçons maintenant les espaces par des _ :\n\nnouveaux_noms &lt;- gsub(\" \", \"_\", nouveaux_noms)\n\nLa fonction tolower() permet de remplacer les majuscules d’une chaîne de caractères par des minuscules (à l’inverse de la fonction toupper()) :\n\nnouveaux_noms &lt;- tolower(nouveaux_noms)\n\nRemplaçons les noms de colonnes du tableau par ce vecteur nouveaux_noms :\n\nnames(pingouins_propre) &lt;- nouveaux_noms\n\nAssurons-nous que notre tableau contient bien les nouveaux noms de colonnes :\n\nnames(pingouins_propre)\n\n[1] \"etudenumero\"        \"echantillon_numero\" \"espece\"            \n[4] \"ile\"                \"id_individu\"        \"longueur_bec_mm\"   \n[7] \"hauteur_bec_mm\"     \"longueur_aile_mm\"   \"masse_corporelle_g\"\n\n\n\n\n\n\n\n\n\nAssigner et afficher\n\n\n\nLorsque nous utilisons une flèche d’assignation, le résultat du code exécuté ne s’affiche pas dans la console. Pour éviter de taper le nom de l’objet que l’on souhaite afficher pour vérifier que le code a bien fonctionné, nous pouvons entourer le code par des parenthèses :\n\n(names(pingouins_propre) &lt;- nouveaux_noms)\n\nLe résultat de la commande s’affiche maintenant dans la console.\n\n\n\nNous pouvons maintenant supprimer l’objet nouveaux_noms de notre environnement à l’aide de la fonction rm() (remove) :\n\nrm(nouveaux_noms)\n\n\n\n\n\n\n\nSupprimer des objets\n\n\n\nVous pouvez également supprimer des objets directement dans le panneau Environnement :\n\nSur la droite du panneau, cliquez sur List puis sur Grid\n\n\n\nCochez les objets à supprimer puis cliquez sur le balai\n\n\nAttention : si vous cliquez sur le balai alors que les objets sont sous forme de liste, vous supprimerez tous les objets de votre environnement."
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#sélectionner-et-filtrer-des-données",
    "href": "posts/02-premiers-pas-avec-r/index.html#sélectionner-et-filtrer-des-données",
    "title": "Premiers pas avec R",
    "section": "Sélectionner et filtrer des données",
    "text": "Sélectionner et filtrer des données\n\nDans R, la sélection de données, que ce soit une cellule, une ligne ou une colonne d’un tableau, ou encore un élément dans une chaîne, s’effectue à l’aide des crochets [].\n\nImaginons un vecteur v, donc un objet à une seule dimension. Vous pouvez sélectionner un seul élément (v[2]), plusieurs éléments qui se suivent (v[2:4]) ou non (v[c(2, 4)]).\n\n\n\n\n\n\n\n\nLa concaténation\n\n\n\nLa fonction c() permet de concaténer les éléments entre parenthèses.\n\n\n\nImaginons un data frame d, la sélection s’effectue toujours à l’aide des crochets, mais en précisant deux paramètres séparés d’une virgule : la ou les ligne(s) et la ou les colonnes(s). Pour sélectionner l’ensemble d’une des deux dimensions, on utilise un espace vide d’un côté ou de l’autre de la virgule.\n\n\n\nCertaines colonnes du tableau ne sont seront pas utiles pour la suite de l’analyse. Nous pouvons soit :\n\nsélectionner les colonnes qui nous intéressent\n\n\npingouins_propre[, c(3:4, 6:9)]\n\n\nsupprimer les colonnes inutiles\n\n\npingouins_propre[, -c(1:2, 5)]\n\nCes deux commandes utilisent les index des colonnes. Vous pouvez également sélectionner ou supprimer des colonnes à l’aide de noms des variables :\n\npingouins_propre[, c(\"espece\", \"ile\", \"longueur_bec_mm\", \"hauteur_bec_mm\",\n              \"longueur_aile_mm\", \"masse_corporelle_g\")]\n\n\nAssignons ce nouveau tableau dans un objet :\n\npingouins_propre &lt;- pingouins_propre[, c(\"espece\", \"ile\", \"longueur_bec_mm\",\n                                         \"hauteur_bec_mm\", \"longueur_aile_mm\",\n                                         \"masse_corporelle_g\")]\n\n\nNous pouvons filtrer les données selon différents critères, à l’aide d’opérateurs.\n\n\n\n\n\n\nLes opérateurs\n\n\n\n\n\n\n==\négal\n\n\n!=\ndifférent\n\n\n&lt;\ninférieur à\n\n\n&lt;=\ninférieur ou égal à\n\n\n&gt;\nsupérieur à\n\n\n&gt;=\nsupérieur ou égal à\n\n\n&\net\n\n\n|\nou\n\n\n!\npas\n\n\n\n\n\n\n# Individus dont la masse est d'au moins 6 kgs\npingouins_propre[pingouins_propre$masse_corporelle_g &gt;= 6000, ]\n\n# Individus vivant sur l'ile Biscoe dont le bec mesure moins de 50 mm de long\npingouins_propre[pingouins_propre$ile == \"Biscoe\" & pingouins_propre$longueur_bec_mm &gt;= 50, ]"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#modifier-une-variable",
    "href": "posts/02-premiers-pas-avec-r/index.html#modifier-une-variable",
    "title": "Premiers pas avec R",
    "section": "Modifier une variable",
    "text": "Modifier une variable\nLes noms d’espèces contenus dans la variable espece sont plutôt longs et peu pratiques à manipuler. Nous allons modifier le contenu de cette variable pour ne garder que le premier mot de chaque chaîne de caractères (Adelie, Chinstrap et Gentoo). Nous allons à nouveau utiliser la fonction gsub() avec une expression régulière pour supprimer tout ce qui vient après le premier espace (nous pourrions également extraire tout ce qui vient avant le premier espace).\n\npingouins_propre$espece &lt;- gsub(\" .*$\", \"\", pingouins_propre$espece)\nhead(pingouins_propre)\n\n  espece       ile longueur_bec_mm hauteur_bec_mm longueur_aile_mm\n1 Adelie Torgersen            39.1           18.7              181\n2 Adelie Torgersen            39.5           17.4              186\n3 Adelie Torgersen            40.3           18.0              195\n4 Adelie Torgersen              NA             NA               NA\n5 Adelie Torgersen            36.7           19.3              193\n6 Adelie Torgersen            39.3           20.6              190\n  masse_corporelle_g\n1               3750\n2               3800\n3               3250\n4                 NA\n5               3450\n6               3650\n\n\n\n\n\n\n\n\nNote\n\n\n\nDans cette expression régulière (regex), le motif recherché est le suivant : un espace vide () suivi de n’importe quel caractère (.) absent ou répété au moins une fois (*), en fin de chaîne ($)."
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#ajouter-une-variable",
    "href": "posts/02-premiers-pas-avec-r/index.html#ajouter-une-variable",
    "title": "Premiers pas avec R",
    "section": "Ajouter une variable",
    "text": "Ajouter une variable\nQuel est le rapport entre la longueur du bec et sa hauteur ? Calculons le ratio :\n\npingouins_propre$ratio_bec &lt;- pingouins_propre$longueur_bec_mm / pingouins_propre$hauteur_bec_mm\n\n\nPour arrondir ce ratio à deux chiffres après la virgule, nous pouvons utiliser la fonction round() :\n\npingouins_propre$ratio_bec &lt;- round(pingouins_propre$ratio_bec, digits = 2)"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#supprimer-les-données-manquantes",
    "href": "posts/02-premiers-pas-avec-r/index.html#supprimer-les-données-manquantes",
    "title": "Premiers pas avec R",
    "section": "Supprimer les données manquantes",
    "text": "Supprimer les données manquantes\nNotre jeu de données contient des données manquantes (NA). En affichant les premières lignes, vous pourrez remarquer que pour l’individu situé sur la quatrième ligne, aucune donnée numérique n’est disponible :\n\nhead(pingouins_propre)\n\n  espece       ile longueur_bec_mm hauteur_bec_mm longueur_aile_mm\n1 Adelie Torgersen            39.1           18.7              181\n2 Adelie Torgersen            39.5           17.4              186\n3 Adelie Torgersen            40.3           18.0              195\n4 Adelie Torgersen              NA             NA               NA\n5 Adelie Torgersen            36.7           19.3              193\n6 Adelie Torgersen            39.3           20.6              190\n  masse_corporelle_g ratio_bec\n1               3750      2.09\n2               3800      2.27\n3               3250      2.24\n4                 NA        NA\n5               3450      1.90\n6               3650      1.91\n\n\nPour savoir combien de données manquantes sont présentes dans vos données, vous pouvez utiliser la commande suivante :\n\ntable(is.na(pingouins_propre))\n\n\nFALSE  TRUE \n 2398    10 \n\n\nNos données contiennent 10 valeurs NA, nous en avons déjà trouvé 5 dans les premières lignes du tableau. Les 5 données manquantes restantes viennent-elles de l’absence de mesure pour un second individu ?\nLa fonction complete.cases() permet d’extraire les lignes d’un tableau pour lesquelles il n’y a aucune donnée manquante.\nNous cherchons à extraire les lignes qui contiennent au moins une donnée manquante. Pour cela nous allons filtrer les données en extrayant les lignes à l’aide de l’opérateur de négation ! :\n\npingouins_propre[!complete.cases(pingouins_propre), ]\n\n    espece       ile longueur_bec_mm hauteur_bec_mm longueur_aile_mm\n4   Adelie Torgersen              NA             NA               NA\n272 Gentoo    Biscoe              NA             NA               NA\n    masse_corporelle_g ratio_bec\n4                   NA        NA\n272                 NA        NA\n\n\nNous avons ici les dix données manquantes. Nous allons supprimer ces deux individus du jeu de données :\n\npingouins_propre &lt;- pingouins_propre[complete.cases(pingouins_propre), ]\n\nNous aurions également pu supprimer les lignes pour lesquelles une des variables numériques contient des données manquantes :\n\npingouins_propre &lt;- pingouins_propre[!is.na(pingouins_propre$longueur_bec_mm), ]\n\nAssurons-nous d’avoir bien supprimé ces données manquantes :\n\ntable(is.na(pingouins_propre))\n\n\nFALSE \n 2394"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#transformer-un-vecteur-en-un-facteur",
    "href": "posts/02-premiers-pas-avec-r/index.html#transformer-un-vecteur-en-un-facteur",
    "title": "Premiers pas avec R",
    "section": "Transformer un vecteur en un facteur",
    "text": "Transformer un vecteur en un facteur\nAffichons la synthèse de nos données\n\nsummary(pingouins_propre)\n\n    espece              ile            longueur_bec_mm hauteur_bec_mm \n Length:342         Length:342         Min.   :32.10   Min.   :13.10  \n Class :character   Class :character   1st Qu.:39.23   1st Qu.:15.60  \n Mode  :character   Mode  :character   Median :44.45   Median :17.30  \n                                       Mean   :43.92   Mean   :17.15  \n                                       3rd Qu.:48.50   3rd Qu.:18.70  \n                                       Max.   :59.60   Max.   :21.50  \n longueur_aile_mm masse_corporelle_g   ratio_bec    \n Min.   :172.0    Min.   :2700       Min.   :1.640  \n 1st Qu.:190.0    1st Qu.:3550       1st Qu.:2.160  \n Median :197.0    Median :4050       Median :2.575  \n Mean   :200.9    Mean   :4202       Mean   :2.606  \n 3rd Qu.:213.0    3rd Qu.:4750       3rd Qu.:3.100  \n Max.   :231.0    Max.   :6300       Max.   :3.610  \n\n\nLa variable espece est considérée comme une simple chaîne de caractère. S’agit-il d’une variable ayant un nombre restreint de modalités ? Pour le savoir, comptons le nombre d’observations uniques :\n\nlength(unique(pingouins_propre$espece))\n\n[1] 3\n\n\n\n\n\n\n\n\nColorer les parenthèses\n\n\n\nIl n’est pas rare que notre code contienne plusieurs parenthèses, ce qui rend sa lecture moins aisée. RStudio vous propose de colorer vos parenthèses afin de mieux vous repérer :\n\nCliquez sur Tools &gt; Global Options &gt; Code &gt; Display\nCochez la case Rainbow parentheses\nCliquez sur Apply\n\n\n\n\nNous aurions pu également utiliser la fonction table() pour extraire les modalités et leur fréquence :\n\ntable(pingouins_propre$espece)\n\n\n   Adelie Chinstrap    Gentoo \n      151        68       123 \n\n\n\nIl n’y a que trois modalités possibles pour cette variable : il s’agit d’une variable catégorielle. La fonction as.factor() permet de transformer un vecteur en un facteur. Par défaut, les modalités (niveaux) d’un facteur sont classés par ordre alphabétique. Vous pouvez définir l’ordre des niveaux à l’aide de l’argument levels = ....\n\npingouins_propre$espece &lt;- as.factor(pingouins_propre$espece)\n\nProcédons de la même façon pour la variable ile :\n\npingouins_propre$ile &lt;- as.factor(pingouins_propre$ile)\n\nVérifiez que les corrections apportées aient bien été appliquées au jeu de données :\n\nsummary(pingouins_propre)\n\n       espece           ile      longueur_bec_mm hauteur_bec_mm \n Adelie   :151   Biscoe   :167   Min.   :32.10   Min.   :13.10  \n Chinstrap: 68   Dream    :124   1st Qu.:39.23   1st Qu.:15.60  \n Gentoo   :123   Torgersen: 51   Median :44.45   Median :17.30  \n                                 Mean   :43.92   Mean   :17.15  \n                                 3rd Qu.:48.50   3rd Qu.:18.70  \n                                 Max.   :59.60   Max.   :21.50  \n longueur_aile_mm masse_corporelle_g   ratio_bec    \n Min.   :172.0    Min.   :2700       Min.   :1.640  \n 1st Qu.:190.0    1st Qu.:3550       1st Qu.:2.160  \n Median :197.0    Median :4050       Median :2.575  \n Mean   :200.9    Mean   :4202       Mean   :2.606  \n 3rd Qu.:213.0    3rd Qu.:4750       3rd Qu.:3.100  \n Max.   :231.0    Max.   :6300       Max.   :3.610  \n\n\n\n\n\n\n\n\n\nRaccourcis clavier : les sections d’un script\n\n\n\nPour afficher le sommaire de votre script, utilisez la combinaison Ctrl + Shift + O.\nVous pouvez également replier (Alt + O) ou déplier (Alt + Shift + O) les sections."
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#agréger-des-données",
    "href": "posts/02-premiers-pas-avec-r/index.html#agréger-des-données",
    "title": "Premiers pas avec R",
    "section": "Agréger des données",
    "text": "Agréger des données\nLa fonction aggregate() permet de calculer des statistiques descriptives (par exemple la moyenne, la médiane, …) d’une variable en regroupant les données.\nCette fonction s’utilise de la manière suivante :\naggregate(y ~ x, data, FUN) :\n\nx : variable explicative qui sert à regouper les données\n\ny : variable pour laquelle on souhaite calculer une statistique\n\ndata : données contenant les variables\n\nFUN : fonction à appliquer.\n\nNous pouvons par exemple calculer la moyenne de la masse corporelle pour chacune des trois espèces :\n\naggregate(masse_corporelle_g ~ espece, data = pingouins_propre, FUN = mean)\n\n     espece masse_corporelle_g\n1    Adelie           3700.662\n2 Chinstrap           3733.088\n3    Gentoo           5076.016\n\n\nNous pouvons également utiliser plusieurs variables de regroupement : calculons la moyenne de la masse corporelle par île et par espèce :\n\naggregate(masse_corporelle_g ~ espece + ile, data = pingouins_propre, FUN = mean)\n\n     espece       ile masse_corporelle_g\n1    Adelie    Biscoe           3709.659\n2    Gentoo    Biscoe           5076.016\n3    Adelie     Dream           3688.393\n4 Chinstrap     Dream           3733.088\n5    Adelie Torgersen           3706.373"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#exporter-des-données",
    "href": "posts/02-premiers-pas-avec-r/index.html#exporter-des-données",
    "title": "Premiers pas avec R",
    "section": "Exporter des données",
    "text": "Exporter des données\nLa fonction write.csv() permet d’exporter un tableau. L’argument row.names = FALSE empêche l’ajout de noms de lignes (dans notre cas des valeurs numériques allant de 1 au nombre de lignes du tableau) :\n\nwrite.csv(pingouins_propre, \"data/pingouins_propre.csv\", row.names = FALSE)"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#barplot",
    "href": "posts/02-premiers-pas-avec-r/index.html#barplot",
    "title": "Premiers pas avec R",
    "section": "Barplot",
    "text": "Barplot\nPour représenter le nombre d’individus par espèce, nous allons utiliser un graphique en barres (barplot) : la hauteur de chaque barre indique le nombre d’individus.\nIl nous faut pour cela un objet contenant l’information sur le nombre d’individus par espèce :\n\ntable(pingouins_propre$espece)\n\n\n   Adelie Chinstrap    Gentoo \n      151        68       123 \n\n\nLa fonction barplot() permet de générer un graphique en barres :\n\nbarplot(table(pingouins_propre$espece))\n\n\n\n\nCe graphique est très basique, nous pouvons améliorer plusieurs points :\n\ntrier les données : nous aimerions que les barres soient triées par ordre décroissant. La fonction sort() permet de trier des données, avec l’argument decreasing = TRUE pour modifier l’ordre (croissant par défaut)\n\n\nbarplot(sort(table(pingouins_propre$espece), decreasing = TRUE))\n\n\n\n\n\najouter des couleurs : le paramètre col permet de modifier la couleur de remplissage des barres, et le paramètre border la couleur de contour. Nous aimerions utiliser les couleurs de l’image ci-dessous :\n\n\n\nbarplot(sort(table(pingouins_propre$espece), decreasing = TRUE),\n        col = c(\"Adelie\" = \"darkorange\",\n                \"Chinstrap\" = \"cyan4\",\n                \"Gentoo\" = \"purple\"),\n        border = NA)\n\n\n\n\n\najouter des titres au graphique et aux axes : l’argument main permet d’ajouter un titre au graphique alors que les arguments xlab et ylab permettent de modifier les titres des axes.\n\n\nbarplot(sort(table(pingouins_propre$espece), decreasing = TRUE),\n        col = c(\"Adelie\" = \"darkorange\",\n                \"Chinstrap\" = \"cyan4\",\n                \"Gentoo\" = \"purple\"),\n        border = NA,\n        main = \"Pingouins de l'archipel Palmer\",\n        ylab = \"Nombre d'individus par espèce\")\n\n\n\n\n\najuster l’échelle de l’axe y : la valeur maximale dépasse la plus grande valeur affichée sur l’axe y. Les options xlim et ylim permettent d’ajuster les limites des axes.\n\n\nbarplot(sort(table(pingouins_propre$espece), decreasing = TRUE),\n        col = c(\"Adelie\" = \"darkorange\",\n                \"Chinstrap\" = \"cyan4\",\n                \"Gentoo\" = \"purple\"),\n        border = NA,\n        main = \"Pingouins de l'archipel Palmer\",\n        ylab = \"Nombre d'individus par espèce\",\n        ylim = c(0, 200))"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#boxplot",
    "href": "posts/02-premiers-pas-avec-r/index.html#boxplot",
    "title": "Premiers pas avec R",
    "section": "Boxplot",
    "text": "Boxplot\nUn boxplot, ou graphique en boîte à moustaches, permet de représenter la dispersion d’une variable.\nNous aimerions représenter la dispersion du ratio entre la longueur et la hauteur du bec. Nous utilisons pour cela la fonction boxplot() :\n\nboxplot(pingouins_propre$ratio_bec)\n\n\n\n\nPour savoir si ce ratio varie en fonction des espèces, nous utilisons l’opérateur ~ : boxplot(x ~ y) permettra de représenter la dispersion de la variable x en fonction de la variable y.\n\nboxplot(pingouins_propre$ratio_bec ~ pingouins_propre$espece)\n\n\n\n\nAjustons quelques éléments :\n\nboxplot(pingouins_propre$ratio_bec ~ pingouins_propre$espece,\n        col = NA,\n        border = c(\"Adelie\" = \"darkorange\",\n                \"Chinstrap\" = \"cyan4\",\n                \"Gentoo\" = \"purple\"),\n        pch = 20,\n        main = \"Rapport entre la longueur et la hauteur du bec\",\n        xlab = \"\",\n        ylab = \"Ratio\")\n\n\n\n\n\n\n\n\n\n\npch\n\n\n\nL’argument pch permet de modifier la forme des points dans un graphique."
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#histogramme",
    "href": "posts/02-premiers-pas-avec-r/index.html#histogramme",
    "title": "Premiers pas avec R",
    "section": "Histogramme",
    "text": "Histogramme\nUn histogramme sert à visualiser la distribution d’une variable numérique.\nComment se distribue la masse corporelle des pingouins ? Nous utilisons la fonction hist()\n\nhist(pingouins_propre$masse_corporelle_g)\n\n\n\n\nL’argument breaks permet d’ajuster le nombre de classes de l’histogramme :\n\nhist(pingouins_propre$masse_corporelle_g,\n     breaks = 20)\n\n\n\n\nNous souhaiterions représenter les valeurs en kilogrammes plutôt qu’en grammes pour facililter la lecture :\n\nhist(pingouins_propre$masse_corporelle_g / 1000,\n     breaks = 20)\n\n\n\n\nAméliorons notre graphique :\n\nhist(pingouins_propre$masse_corporelle_g / 1000,\n     breaks = 20,\n     col = \"lightblue\",\n     border = \"darkblue\",\n     ylim = c(0, 50),\n     main = \"Distribution de la masse corporelle\",\n     xlab = \"Masse (kgs)\",\n     ylab = \"Fréquence\")"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#scatter-plot",
    "href": "posts/02-premiers-pas-avec-r/index.html#scatter-plot",
    "title": "Premiers pas avec R",
    "section": "Scatter plot",
    "text": "Scatter plot\nLe scatter plot (ou nuage de points) permet de représenter la relation entre deux variables numériques. Nous utilisons pour cela la fonction plot()\nQuelle est la relation entre la longueur des ailes et la longueur du bec ?\n\nplot(x = pingouins_propre$longueur_aile_mm, y = pingouins_propre$longueur_bec_mm)\n\n\n\n\nCe graphique ne nous donne aucune indication sur les différentes espèces. Nous allons donc ajouter une couleur à chaque point, en ajoutant une variable couleur à notre tableau d’origine. Les valeurs de cette variables dépendent de l’espèce.\n\npingouins_propre$couleur[pingouins_propre$espece == \"Adelie\"] &lt;- \"darkorange\"\npingouins_propre$couleur[pingouins_propre$espece == \"Chinstrap\"] &lt;- \"purple\"\npingouins_propre$couleur[pingouins_propre$espece == \"Gentoo\"] &lt;- \"cyan4\"\n\nReprésentons à nouveau nos données :\n\nplot(x = pingouins_propre$longueur_aile_mm, y = pingouins_propre$longueur_bec_mm,\n     col = pingouins_propre$couleur)\n\n\n\n\nAméliorons à présent le graphique en modifiant la forme des points et en ajoutant/modifiant les titres :\n\nplot(x = pingouins_propre$longueur_aile_mm, y = pingouins_propre$longueur_bec_mm,\n     col = pingouins_propre$couleur,\n     pch = 20,\n     main = \"Relation entre la longueur des ailes et la longueur du bec\",\n     xlab = \"Longueur des ailes (mm)\",\n     ylab = \"Longueur du bec (mm)\")\n\n\n\n\nPour finir, ajoutons une légende à notre graphique à l’aide la fonction legend() :\n\nplot(x = pingouins_propre$longueur_aile_mm, y = pingouins_propre$longueur_bec_mm,\n     col = pingouins_propre$couleur,\n     pch = 20,\n     main = \"Relation entre la longueur des ailes et la longueur du bec\",\n     xlab = \"Longueur des ailes (mm)\",\n     ylab = \"Longueur du bec (mm)\")\nlegend(legend = sort(unique(pingouins_propre$espece)),\n       x = 215,\n       y = 40,\n       col = c(\"darkorange\", \"purple\", \"cyan4\"),\n       pch = 19)"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#exporter-un-graphique",
    "href": "posts/02-premiers-pas-avec-r/index.html#exporter-un-graphique",
    "title": "Premiers pas avec R",
    "section": "Exporter un graphique",
    "text": "Exporter un graphique\nPour exporter un graphique, vous pouvez cliquer sur Export dans l’onglet Plots :\n\nDans la fenêtre qui s’ouvre, choisissez l’emplacement où votre graphique sera exporté, et donnez-lui un nom. Vous pouvez aussi ajuster les dimensions de la figure.\n\nVous pouvez également sauvegarder votre graphique à l’aide des fonctions suivantes :\n\npng() pour ouvrir l’outil graphique\ndev.off() pour fermer l’outil graphique\n\n\npng(\"figs/nombre_pingouins.png\")\n\nbarplot(sort(table(pingouins_propre$espece), decreasing = TRUE),\n        col = c(\"Adelie\" = \"darkorange\",\n                \"Chinstrap\" = \"cyan4\",\n                \"Gentoo\" = \"purple\"),\n        border = NA,\n        main = \"Pingouins de l'archipel Palmer\",\n        ylab = \"Nombre d'individus par espèce\",\n        ylim = c(0, 200))\n\ndev.off()\n\n\n\n\n\n\n\nLes paramètres graphiques\n\n\n\nPour afficher l’aide des paramètres graphiques, tapez ?par"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html",
    "href": "posts/04-rmarkdown/index.html",
    "title": "Introduction à RMarkdown",
    "section": "",
    "text": "Ce tutoriel est adapté de Getting started with R Markdown du site Our Coding Club."
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#quest-ce-que-r-markdown",
    "href": "posts/04-rmarkdown/index.html#quest-ce-que-r-markdown",
    "title": "Introduction à RMarkdown",
    "section": "Qu’est-ce que R Markdown ?",
    "text": "Qu’est-ce que R Markdown ?\nR Markdown vous permet de créer des documents, notamment des rapports de vos analyses. Les personnes qui liront votre code doivent pouvoir facilement comprendre votre code et obtenir les mêmes résultats : c’est la reproductibilité.\nVous pouvez créer un document R Markdown et le partager, ou vous en servir à titre personnel pour garder une trace des étapes et des résultats d’une analyse.\nR Markdown permet d’afficher le code utilisé et les résultats obtenus (graphiques, tables, …) ainsi que des commentaires explicatifs, un peu à la manière d’un cahier de laboratoire.\nR Markdown utilise la syntaxe Markdown, un langage markup qui propose des outils pour créer des documents avec des en-têtes, des images, des liens, …\nUn document Markdown peut être converti en différents formats comme du html ou du pdf.\nLorsque vous créez un fichier R Markdown (.Rmd), vous utiliserez la syntaxe Markdown aux côtés de blocs de code écrits en R (ou d’autres langages de programmation). Ce fichier est ensuite compilé : le format Markdown et le code sont évalués, et un fichier de sortie (html, pdf, …) est généré."
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#pré-requis",
    "href": "posts/04-rmarkdown/index.html#pré-requis",
    "title": "Introduction à RMarkdown",
    "section": "Pré-requis",
    "text": "Pré-requis\nSi vous n’avez pas suivi les autres tutoriels, vous pouvez créer un projet RStudio et une arborescence.\nPour utiliser RMarkdown dans RStudio, installez et chargez le package rmarkdown :\n\ninstall.packages(\"rmarkdown\")\nlibrary(rmarkdown)"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#ouvrir-un-nouveau-fichier-r-markdown",
    "href": "posts/04-rmarkdown/index.html#ouvrir-un-nouveau-fichier-r-markdown",
    "title": "Introduction à RMarkdown",
    "section": "Ouvrir un nouveau fichier R Markdown",
    "text": "Ouvrir un nouveau fichier R Markdown\nPour créer un nouveau document R Markdown (.RMd), cliquez sur File &gt; New File &gt; R Markdown …. Vous pouvez également cliquer sur le symbole Plus et choisir R Markdown….\n\nDans la fenêtre qui s’ouvre, laissez les paramètres par défaut et cliquez sur Create Empty Document (en cliquant sur OK vous créerez un document pré-rempli).\nVotre document vide s’ouvre dans la fenêtre en haut à gauche de RStudio."
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#ajouter-un-en-tête",
    "href": "posts/04-rmarkdown/index.html#ajouter-un-en-tête",
    "title": "Introduction à RMarkdown",
    "section": "Ajouter un en-tête",
    "text": "Ajouter un en-tête\nUn document Rmd débute par une section d’en-tête encadrée par trois tirets et qui contient généralement les éléments suivants :\n\nun titre\nles auteurs\nla date\nle format de sortie\n\nVoici un exemple d’en-tête à insérer en haut de votre ficher .Rmd :\n\n---\ntitle: \"Pingouins de l'archipel Palmer\"\nauthor: Jonathan Kitt\ndate: 2022-11-14\noutput: html_document\n---\n\n\n\n\n\n\n\nLe YAML\n\n\n\nCet en-tête s’appelle un YAML : Yet Another Markup Language\n\n\n\nSauvegardez votre fichier Rmd en cliquant sur l’icône disquette (ou en utilisant la combinaison Ctrl + S). Choisissez un nom pour votre fichier et placez-le dans votre dossier docs."
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#compiler-un-document-r-markdown",
    "href": "posts/04-rmarkdown/index.html#compiler-un-document-r-markdown",
    "title": "Introduction à RMarkdown",
    "section": "Compiler un document R Markdown",
    "text": "Compiler un document R Markdown\nPour compiler votre fichier Rmd et générer le document au format choisi (html dans notre cas), cliquez sur le bouton Knit : le document s’ouvre dans une nouvelle fenêtre.\n\n\n\n\n\n\n\n\nRaccourci clavier : compiler un fichier Rmd\n\n\n\nPour compiler un fichier Rmd, utilisez la combinaison Ctrl + Shift + K\n\n\n\nDans l’explorateur de fichiers vous pouvez remarquer qu’un fichier mesures_pingouins.html a été ajouté dans le répertoire docs : il s’agit du fichier html issu de la compilation du fichier Rmd. En cliquant sur le nom de ce fichier vous aurez le choix entre l’ouvrir dans l’éditeur ou dans un navigateur internet.\n\n\n\n\n\n\n\n\nPrévisualiser le document\n\n\n\nPar défaut, lorsque vous compilez un fichier Rmd, le document généré s’ouvre dans une nouvelle fenêtre. Vous pouvez choisir d’afficher cette pré-visualisation directement dans l’onglet Viewer en bas à droite de RStudio en cliquant sur la roue à droite du bouton Knit puis sur Preview in Viewer Pane.\nEn décochant Show Previews Inline, le résultat de l’exécution de code ne s’affichera plus dans votre fichier Rmd."
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#mettre-en-forme-le-texte",
    "href": "posts/04-rmarkdown/index.html#mettre-en-forme-le-texte",
    "title": "Introduction à RMarkdown",
    "section": "Mettre en forme le texte",
    "text": "Mettre en forme le texte\n\n\n\n\n\n\nSaut de ligne\n\n\n\nLorsque vous tapez du texte, pour passer à la ligne suivante, il vous faut insérer deux espaces puis appuyer sur Entrée.\n\n\nPour mettre en forme votre texte, utilisez les conventions suivantes :\n\n\n\n*italiques*\nitaliques\n\n\n**gras**\ngras\n\n\n***italiques et gras***\nitaliques et gras\n\n\n~~barré~~\nbarré\n\n\n[texte](lien)\ntexte\n\n\ntexte ^exposant^\ntexte exposant\n\n\ntexte ~indice ~\ntexte indice\n\n\n`code`\ncode"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#insérer-des-titres",
    "href": "posts/04-rmarkdown/index.html#insérer-des-titres",
    "title": "Introduction à RMarkdown",
    "section": "Insérer des titres",
    "text": "Insérer des titres\nPour insérer un titre, utilisez un #. Les différents niveaux (titre, sous-titre, paragraphe, …) se définissent en fonction du nombre de # :\n\n# Titre\n## Sous-titre\n### Paragraphe"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#insérer-une-ligne-horizontale",
    "href": "posts/04-rmarkdown/index.html#insérer-une-ligne-horizontale",
    "title": "Introduction à RMarkdown",
    "section": "Insérer une ligne horizontale",
    "text": "Insérer une ligne horizontale\nPour insérer une ligne horizontale dans votre texte, utilisez trois étoiles ***."
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#insérer-des-listes",
    "href": "posts/04-rmarkdown/index.html#insérer-des-listes",
    "title": "Introduction à RMarkdown",
    "section": "Insérer des listes",
    "text": "Insérer des listes\nVous pouvez insérer une liste à puces :\n\n* item a  \n* item b  \n* item c  \n    + item c1\n    + item c2\n\n\nitem a\n\nitem b\n\nitem c\n\nitem c1\nitem c2\n\n\n\nOu une liste numérotée :\n\n1. item a  \n2. item b  \n3. item c  \n\n\nitem a\n\nitem b\n\nitem c"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#insérer-un-tableau",
    "href": "posts/04-rmarkdown/index.html#insérer-un-tableau",
    "title": "Introduction à RMarkdown",
    "section": "Insérer un tableau",
    "text": "Insérer un tableau\nVous pouvez insérer un tableau en le “dessinant” :\n\ndes tirets - pour déparer l’en-tête du reste du tableau\ndes barres verticales | pour délimiter les colonnes\n\n\n| col1 | col2 | col3 |\n| ---- | ---- | ---- |\n| A    | 1    | ech1 |\n| B    | 2    | ech2 |\n| C    | 3    | ech3 |  \n\n\n\n\ncol1\ncol2\ncol3\n\n\n\n\nA\n1\nech1\n\n\nB\n2\nech2\n\n\nC\n3\nech3\n\n\n\n\nPour aligner le texte, utilisez deux points : :\n\n| gauche | centre | droite |\n| :----- | :----: | -----: |\n| A      | 1      | ech1   |\n| B      | 2      | ech2   |\n| C      | 3      | ech3   |  \n\n\n\n\ngauche\ncentre\ndroite\n\n\n\n\nA\n1\nech1\n\n\nB\n2\nech2\n\n\nC\n3\nech3"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#equations",
    "href": "posts/04-rmarkdown/index.html#equations",
    "title": "Introduction à RMarkdown",
    "section": "Equations",
    "text": "Equations\nLa syntaxe pour insérer une équation se base sur LaTeX :\n\nUn cercle de rayon $r$ a une aire $A = \\pi \\times r^2$ \n\nUn cercle de rayon \\(r\\) a une aire \\(A = \\pi \\times r^2\\)\nPour afficher une équation au centre du document, vous pouvez l’encadrer de deux signes $.\n\nUn cercle de rayon $r$ a une aire $$A = \\pi \\times r^2$$\n\nUn cercle de rayon \\(r\\) a une aire \\[A = \\pi \\times r^2\\]"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#insérer-une-image",
    "href": "posts/04-rmarkdown/index.html#insérer-une-image",
    "title": "Introduction à RMarkdown",
    "section": "Insérer une image",
    "text": "Insérer une image\nVous pouvez insérer une image dans votre fichier :\n\n\n\n\n\n\nChemins vers les fichiers\n\n\n\nLorsque que vous indiquez un chemin vers un fichier dans RMarkdown, le dossier “racine” n’est plus votre répertoire de travail (votre projet) mais le dossier dans lequel se trouve le fichier .Rmd, dans le cas présent le répertoire docs/.\nIl faut donc revenir en arrière d’un niveau, à l’aide de ../.\nLorsque vous naviguez dans une arborescence à l’aide de la ligne de commande, . indique le répertoire de travail et .. le répertoire situé un niveau au-dessus dans votre arborescence.\n\n\n\n![](../figs/pingouins.png){width=\"75%\"}\n\n\nVous pouvez ajouter une légende entre les crochets []. L’option width permet d’ajuster la largeur relative de l’image."
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#insérer-un-bloc-de-code-r",
    "href": "posts/04-rmarkdown/index.html#insérer-un-bloc-de-code-r",
    "title": "Introduction à RMarkdown",
    "section": "Insérer un bloc de code R",
    "text": "Insérer un bloc de code R\nCommençons par importer notre jeu de données. Nous allons pour cela insérer un bloc de code dans notre fichier.\nPour insérer un bloc de code, cliquez sur l’icône située en haut à droite du fichier Rmdet choisissez R (d’autres langages de programmation sont disponibles).\n\nUn bloc de code contient les éléments suivants :\n\ndes accents ``` pour délimiter le bloc\ndes accolades contenant des informations : {r} (nous verrons d’autres paramètres plus loin)\ntrois icônes :\n\nune roue pour ajouter des options\nune flèche pointant vers le bas pour exécuter tout le code jusqu’à ce bloc\nune flèche pointant vers la droite pour exécuter le bloc (vous pouvez également exécuter le code d’un bloc en vous positionnant sur le code et en utilisant la combinaison Ctrl + Entrée)\n\n\n\n\n\n\n\n\n\nRaccourci clavier : insérer un bloc de code\n\n\n\nPour insérer un bloc de code, utiliser la combinaison Ctrl + Alt + I\n\n\n\nAjoutez le code suivant dans ce bloc de code et exécutez-le (attention au chemin !) :\n\npingouins &lt;- read.csv(\"../data/pingouins_propre.csv\")\n\nLe fichier a bien été importé et stocké dans l’objet pingouins visible dans l’environnement.\nLorsque vous compilez votre fichier Rmd, le code est exécuté et s’affiche dans votre document de sortie (au format html). L’objet pingouins n’est pas visible dans l’environnement lorsque vous compilez votre fichier Rmd, mais il est bel et bien disponible et vous pourrez le manipuler à l’aide de blocs de code."
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#paramétrer-un-bloc-de-code",
    "href": "posts/04-rmarkdown/index.html#paramétrer-un-bloc-de-code",
    "title": "Introduction à RMarkdown",
    "section": "Paramétrer un bloc de code",
    "text": "Paramétrer un bloc de code\nLorsque vous insérez un bloc de code, des paramètres vous permettent de préciser si le code doit être affiché ou non, exécuté ou non, …\nVous pouvez régler certains paramètres en cliquant sur la roue à droite du bloc :\n\nVous pouvez également renseigner ces paramètres directement dans les accolades : {r, eval = FALSE} par exemple.\n\n\n\noption\npar défaut\neffet\n\n\n\n\neval\nTRUE\névaluer le code et inclure le résultat\n\n\necho\nTRUE\nafficher le code avec le résultat\n\n\nwarning\nTRUE\nafficher les messages d’avertissement\n\n\nerror\nFALSE\nafficher les messages d’erreur\n\n\n\n\nSi vous le souhaitez, vous pouvez définir en haut de votre fichier Rmd les paramètres à appliquer à l’ensemble des blocs de code :\n\n\n\n\n\n\n\nBonnes pratiques : nommer les blocs de code\n\n\n\nComme vous pouvez le voir dans le dernier exemple, il est utile de nommer les blocs de code :\n\nen utilisant la roue à droite du bloc et en tapant le nom dans Chunck Name\nen tapant le nom directement dans les accolades"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#exécuter-du-code-dans-le-texte",
    "href": "posts/04-rmarkdown/index.html#exécuter-du-code-dans-le-texte",
    "title": "Introduction à RMarkdown",
    "section": "Exécuter du code dans le texte",
    "text": "Exécuter du code dans le texte\nNous avons vu plus haut comment insérer du texte au format code.\nVous pouvez exécuter le code en ajoutant un r :\n\nLa racine carrée de 20 est **`r sqrt(20)`**\n\nLa racine carrée de 20 est 4.472136"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#introduction-1",
    "href": "posts/04-rmarkdown/index.html#introduction-1",
    "title": "Introduction à RMarkdown",
    "section": "Introduction",
    "text": "Introduction\nCommençons par rédiger une courte introduction avec les éléments suivants :\n\nnom du fichier\nlien vers l’étude\nimage avec référence et lien\n\nCopiez le texte ci-dessous et collez-le dans votre fichier Rmd :\nLe fichier `pingouins.csv` contient des mesures pour [trois espèces de pingouins vivant en Antarctique (archipel Palmer)](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0090081#s2).\n\n![[Dessin de @allison_horst](https://allisonhorst.com/)](../figs/pingouins.png){width=\"50%\"}"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#importer-les-données",
    "href": "posts/04-rmarkdown/index.html#importer-les-données",
    "title": "Introduction à RMarkdown",
    "section": "Importer les données",
    "text": "Importer les données\nPour utiliser les données dans notre fichier Rmd nous devons les importer.\nDans le cadre de ce tutoriel nous choisissons de ne pas faire apparaître le code utilisé pour importer les données. Nous ajoutons donc les paramètres nécessaires dans le bloc de code. Comme dans un script, nous commentons les blocs de code.\n```{r, importer donnees, echo=FALSE}\n# Importer les donnees sans afficher le code\npingouins &lt;- read.csv(\"../data/pingouins_propre.csv\")\n```\n\n\n\n\n\n\nModifier le répertoire de compilation\n\n\n\nVous pouvez modifier le répertoire à partir duquel se fait la compilation en cliquant sur la flèche à droite du bouton Knit puis sur Knit directory et choisir Project Directory. Cela ne vaut que pour le code exécuté à l’intérieur d’un bloc, pour l’insertion d’images par exemple il vous faudra toujours remonter d’un niveau dans le chemin : ../."
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#décrire-les-données",
    "href": "posts/04-rmarkdown/index.html#décrire-les-données",
    "title": "Introduction à RMarkdown",
    "section": "Décrire les données",
    "text": "Décrire les données\nNous pouvons afficher les dimensions du tableau à l’aide de code dynamique :\n\nLe jeu de données contient **`r nrow(pingouins)` observations** et **`r ncol(pingouins)` variables**.\n\nNous pouvons extraire les noms des espèces et des îles :\n\nLes mesures concernent **`r length(unique(pingouins$espece))` espèces** de pingouins : \n\n- *`r sort(unique(pingouins$espece))[1]`*  \n\n- *`r sort(unique(pingouins$espece))[2]`*  \n\n- *`r sort(unique(pingouins$espece))[3]`*\n\nCes pingouins vivent sur **`r length(unique(pingouins$ile))` îles** : \n\n- `r sort(unique(pingouins$ile))[1]` \n\n- `r sort(unique(pingouins$ile))[2]`  \n\n- `r sort(unique(pingouins$ile))[3]`\n\nComment les espèces sont-elles réparties sur les îles ?\nLes individus se répartissent de la façon suivante : \n\n\n```{r, repartition individus, echo=FALSE, comment=\"\"}\n# Tableau de la répartition des individus\ntable(pingouins$espece, pingouins$ile)\n```\n\n\n\n\n\n\nAfficher ou non les # en sortie\n\n\n\nLe paramètre comment = \"\" utilisé dans le bloc de code ci-dessus permet de ne pas afficher de # dans la sortie.\n\n\nQuelles sont les variables du tableau ?\n\nLes variables sont les suivantes : \n  \n| variable                | type                       | exemple             |\n| :---------------------: | :------------------------: | :-----------------: |\n| `r names(pingouins)[1]` | `r typeof(pingouins[, 1])` | `r pingouins[1, 1]` |\n| `r names(pingouins)[2]` | `r typeof(pingouins[, 2])` | `r pingouins[1, 2]` |\n| `r names(pingouins)[3]` | `r typeof(pingouins[, 3])` | `r pingouins[1, 3]` |\n| `r names(pingouins)[4]` | `r typeof(pingouins[, 4])` | `r pingouins[1, 4]` |\n| `r names(pingouins)[5]` | `r typeof(pingouins[, 5])` | `r pingouins[1, 5]` |\n| `r names(pingouins)[6]` | `r typeof(pingouins[, 6])` | `r pingouins[1, 6]` | \n\nPour clore cette description du jeu de données, affichons les premières lignes du tableau. La fonction kable() du package knitr permet d’afficher des tableaux :\nLes données se présentent comme ci-dessous : \n\n\n```{r, apercu tableau, echo=FALSE}\n# Afficher les 3 premieres lignes\nknitr::kable(head(pingouins, 3))\n```"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#représenter-les-données",
    "href": "posts/04-rmarkdown/index.html#représenter-les-données",
    "title": "Introduction à RMarkdown",
    "section": "Représenter les données",
    "text": "Représenter les données\nR Markdown permet d’exécuter le code utilisé pour générer un graphique et d’afficher celui-ci directement dans le document.\n\nNombre d’individus par espèce\nQuelle est l'espèce la plus représentée ?\n\n\n```{r, nombre individus, echo=FALSE}\n# Barplot : nombre d'individus par espece \nbarplot(sort(table(pingouins$espece), decreasing = TRUE),\n        col = c(\"Adelie\" = \"darkorange\",\n                \"Chinstrap\" = \"cyan4\",\n                \"Gentoo\" = \"purple\"),\n        border = NA,\n        main = \"Pingouins de l'archipel Palmer\",\n        ylab = \"Nombre d'individus par espèce\",\n        ylim = c(0, 200))\n```\n\n\nRapport entre la longueur et la hauteur du bec\nLes mesures du bec permettent-elles de différencier les espèces ?\n\n\n```{r, ratio bec, echo=FALSE}\n# Calculer le ratio entre la longueur et la hauteur du bec\npingouins$ratio_bec &lt;- round(pingouins$longueur_bec_mm / pingouins$hauteur_bec_mm,\n                             digits = 2)\n\n# Boxplot : ratio du bec en fonction de l'espece\nboxplot(pingouins$ratio_bec ~ pingouins$espece,\n        col = NA,\n        border = c(\"Adelie\" = \"darkorange\",\n                   \"Chinstrap\" = \"cyan4\",\n                   \"Gentoo\" = \"purple\"),\n        pch = 20,\n        main = \"Rapport entre la longueur et la hauteur du bec\",\n        xlab = \"\",\n        ylab = \"Ratio\")\n```\n\n\n\n\n\n\nAfficher deux graphiques côte à côte\n\n\n\nPour afficher deux graphiques côte à côte, vous pouvez utiliser les paramètres suivants : {r, out.width=c(\"50%\", \"50%\"), fig.show=\"hold\"}\n\nout.width permet d’ajuster les largeurs relatives des graphiques (en %)\nfig.show=\"hold\" indique à R qu’il doit exécuter l’ensemble du code avant d’afficher les graphiques (sans ce paramètre, les deux graphiques seront affichés l’un au-dessus de l’autre)\n\n\n\n\n\nDistribution de la masse corporelle\nComment se distribue la masse corporelle de l'ensemble des pingouins ?\n\n\n```{r, distribution masse, echo=FALSE}\n# Histogramme : distribution de la masse corporelle\nhist(pingouins$masse_corporelle_g / 1000,\n     breaks = 20,\n     col = \"lightblue\",\n     border = \"darkblue\",\n     ylim = c(0, 50),\n     main = \"Distribution de la masse corporelle\",\n     xlab = \"Masse (kgs)\",\n     ylab = \"Fréquence\")\n```\n\n\nRelation entre la longueur des ailes et la longueur du bec\nY a-t-il une relation entre la longueur des ailes et la longueur du bec ?\nCes mesures varient-elles en fonction de l'espèce ?\n\n\n```{r, distribution masse, echo=FALSE}\n# Ajouter une variable couleur \npingouins$couleur[pingouins$espece == \"Adelie\"] &lt;- \"darkorange\"\npingouins$couleur[pingouins$espece == \"Chinstrap\"] &lt;- \"purple\"\npingouins$couleur[pingouins$espece == \"Gentoo\"] &lt;- \"cyan4\"\n\n# Scatter plot : longueur des ailes vs longueur du bec\nplot(x = pingouins$longueur_aile_mm, y = pingouins$longueur_bec_mm,\n     col = pingouins$couleur,\n     pch = 20,\n     main = \"Relation entre la longueur des ailes et la longueur du bec\",\n     xlab = \"Longueur des ailes (mm)\",\n     ylab = \"Longueur du bec (mm)\")\nlegend(legend = sort(unique(pingouins$espece)),\n       x = 215,\n       y = 40,\n       col = c(\"darkorange\", \"purple\", \"cyan4\"),\n       pch = 19)\n```"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#document-word",
    "href": "posts/04-rmarkdown/index.html#document-word",
    "title": "Introduction à RMarkdown",
    "section": "Document Word",
    "text": "Document Word\n\n---\ntitle: \"Pingouins de l'archipel Palmer\"\nauthor: Jonathan Kitt\ndate: 2022-11-14\noutput:\n  word_document\n---"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#document-pdf",
    "href": "posts/04-rmarkdown/index.html#document-pdf",
    "title": "Introduction à RMarkdown",
    "section": "Document PDF",
    "text": "Document PDF\n\n---\ntitle: \"Pingouins de l'archipel Palmer\"\nauthor: Jonathan Kitt\ndate: 2022-11-14\noutput:\n  pdf_document\n---"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#ajouter-une-table-des-matières",
    "href": "posts/04-rmarkdown/index.html#ajouter-une-table-des-matières",
    "title": "Introduction à RMarkdown",
    "section": "Ajouter une table des matières",
    "text": "Ajouter une table des matières\nVous pouvez ajouter une table des matières, toujours à l’aide de paramètres à ajouter dans l’en-tête.\n\ntoc: true : ajouter une table des matières (table of contents) au début du document\ntoc_float: true : table des matières “flottante” (pour un document au format html)\ntoc_depth: 1 : nombre de niveaux à inclure dans la table des matières\n\n\n---\ntitle: \"Pingouins de l'archipel Palmer\"\nauthor: Jonathan Kitt\ndate: 2022-11-14\noutput:\n  html_document:\n    toc: true\n    toc_float: true\n    toc_depth: 2\n---"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#modifier-le-thème",
    "href": "posts/04-rmarkdown/index.html#modifier-le-thème",
    "title": "Introduction à RMarkdown",
    "section": "Modifier le thème",
    "text": "Modifier le thème\nVous pouvez modifier le style général de votre document au format html en changeant le thème (default, bootstrap, cerulean, cosmo, darkly, flatly, journal, lumen, paper, readable, sandstone, simplex, spacelab, united et yeti).\nPour n’utiliser aucun thème, utilisez l’option theme: null\n\n---\ntitle: \"Pingouins de l'archipel Palmer\"\nauthor: Jonathan Kitt\ndate: 2022-11-14\noutput:\n  html_document:\n    toc: true\n    toc_depth: 2\n    theme: flatly\n---"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  }
]